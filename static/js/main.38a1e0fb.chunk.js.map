{"version":3,"sources":["assets/background.jpg","components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","props","className","type","value","placeholder","onChange","change","Result","weather","date","sunrise","sunset","temp","pressure","wind","err","city","clouds","description","icon","content","sunriseTime","Date","toLocaleString","sunsetTime","src","alt","App","state","handleInputChange","e","setState","target","prevProps","prevState","this","length","API","fetch","then","response","ok","Error","json","data","time","sys","main","speed","all","catch","backgroundimg","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.38a1e0fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.afab29da.jpg\";","import React from \"react\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <form className=\"form__search\">\r\n      <input\r\n        className=\"form__input\"\r\n        type=\"text\"\r\n        value={props.value}\r\n        placeholder=\"Enter city\"\r\n        onChange={props.change}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Result = (props) => {\r\n  const {\r\n    date,\r\n    sunrise,\r\n    sunset,\r\n    temp,\r\n    pressure,\r\n    wind,\r\n    err,\r\n    city,\r\n    clouds,\r\n    description,\r\n    icon,\r\n  } = props.weather;\r\n\r\n  let content = null;\r\n\r\n  if (!err && city) {\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleString();\r\n    const sunsetTime = new Date(sunset * 1000).toLocaleString();\r\n    content = (\r\n      <div className=\"form__result\">\r\n        <h2 className=\"form__header\">{city}</h2>\r\n        <h4 className=\"form__date\">{date}</h4>\r\n        <div className=\"form__temp-icon\">\r\n          <span className=\"form__temp\">{temp} &#176;C</span>\r\n          <div className=\"form__icon\">\r\n            <img\r\n              src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n              alt=\"icon weather\"\r\n            />\r\n            <span>{description}</span>\r\n          </div>\r\n        </div>\r\n        <ul className=\"form__list\">\r\n          <li className=\"form__data\">\r\n            Sunrise time <span>{sunriseTime}</span>\r\n          </li>\r\n          <li className=\"form__data\">\r\n            Sunset time <span>{sunsetTime}</span>\r\n          </li>\r\n          <li className=\"form__data\">\r\n            Wind <span>{wind} m/s</span>\r\n          </li>\r\n          <li className=\"form__data\">\r\n            Pressure <span>{pressure} hPa </span>\r\n          </li>\r\n          <li className=\"form__data\">\r\n            Clouds <span>{clouds} % of the sky </span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"form__err\">\r\n        {err ? `Nie mamy w bazie ${city}` : content}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React from \"react\";\nimport Form from \"./Form\";\nimport Result from \"./Result\";\nimport \"../scss/App.scss\";\n\nimport backgroundimg from \"../assets/background.jpg\";\n\nconst APIKey = \"4075410fee48146ae4e0d5bbd47b7805\";\n\nclass App extends React.Component {\n  state = {\n    value: \"\",\n    date: \"\",\n    city: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    pressure: \"\",\n    wind: \"\",\n    clouds: \"\",\n    icon: \"\",\n    description: \"\",\n    err: false,\n  };\n\n  handleInputChange = (e) => {\n    this.setState({\n      value: e.target.value,\n    });\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.value.length === 0) return;\n    if (prevState.value !== this.state.value) {\n      const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`;\n\n      fetch(API)\n        .then((response) => {\n          if (response.ok) {\n            return response;\n          }\n          throw Error(\"Not working\");\n        })\n        .then((response) => response.json())\n        .then((data) => {\n          const time = new Date().toLocaleString();\n          this.setState((prevState) => ({\n            err: false,\n            date: time,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            temp: data.main.temp,\n            pressure: data.main.pressure,\n            wind: data.wind.speed,\n            city: this.state.value,\n            clouds: data.clouds.all,\n            icon: data.weather[0].icon,\n            description: data.weather[0].description,\n          }));\n        })\n        .catch((err) => {\n          this.setState((prevState) => ({\n            err: true,\n            city: prevState.value,\n          }));\n        });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <img className=\"app__background\" src={backgroundimg} alt=\"sky\" />\n        <h1 className=\"app__header\">Weather App</h1>\n        <h2 className=\"app__header app__header--md \">\n          Check out the weather in the city\n        </h2>\n        <div className=\"form\">\n          <Form value={this.state.value} change={this.handleInputChange} />\n          <Result weather={this.state} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}